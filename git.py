def yes_or_no(question):
    while "the answer is invalid":
        reply = str(input(question+' (y/n): ')).lower().strip()
        if reply[:1] == 'y':
            return True
        if reply[:1] == 'n':
            return False

def run(command,universal_newlines=True):
    cp = subprocess.run(
        command,
        universal_newlines=universal_newlines,
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )

    if int(cp.returncode) > 0:
        log_error(f'ERROR({cp.returncode}): {cp.stderr}')
        sys.exit(cp.returncode)

    return(cp.stdout.strip())

def verify_bitbucket_repo_doesnt_exist(project_name,repo_name):
    try:
        repos = stash.projects[project_name].repos.list()
    except Exception as error:
        log_error(f'ERROR: Can\'t list bitbucket repos: {error}')
        sys.exit(20)

    if any(repo['name'] == repo_name for repo in repos):
        log_error(f'ERROR: A repository named {repo_name} already exists in the project named {project_name}!! Exiting.')
        sys.exit(25)

def create_new_bitbucket_repo(project_name,repo_name):
    message = f'Are you sure you want to create a new repo named {repo_name} in the project named {project_name}?'
    response = yes_or_no(f'ðŸš€ {Style.BRIGHT}{message}{Style.RESET_ALL}')
    if not response == True:
        log_error("Exiting per user request not to continue")
        sys.exit(30)

    try:
        new_repo = stash.projects[project_name].repos.create(repo_name)
    except Exception as error:
        log_error(f'ERROR: creating bitbucket repo: {error}')
        sys.exit(40)

def init_local_git_repo(repo_name,git_url):
    run(["git", "init"])
    run(["git", "remote", "add", "origin", git_url])

# GIT
def add_and_commit():
    run(["git", "add", "--all"])
    run(["git", "-c", "commit.gpgsign=false", "commit", "-m", f'"Initial commit. Generated by cookiecutter-flask-api"'])

def push_branch_to_bitbucket(branch_name="master"):
    run(["git", "-c", "commit.gpgsign=false", "push", "--set-upstream", "origin", branch_name])

def fetch_origin():
    run(["git", "fetch", "origin"])


# ----------------------------------------------------------------------
# IF CREATE BITBUCKET
# ----------------------------------------------------------------------
if create_bitbucket_repo == "yes":
    # VARS & INPUT
    f = Figlet(font='Cybermedium', width=100)
    text = f.renderText('Bitbucket Repo')

    lower_rule()
    lol_py(text,end="")
    upper_rule()

    project_name = '{{ cookiecutter.project_name }}'
    repo_name =  '{{ cookiecutter.app_name }}'

    repo_git_url = f'ssh://git@bb.example.com/{project_name}/{repo_name}.git'
    repo_web_url = f'https://bb.example.comm/projects/{project_name}/repos/{repo_name}/browse'

    try:
        bb_token = getpass.getpass("ðŸ”’ Bitbucket User Token: ")
        stash = stashy.connect("https://bb.example.com/", "{{ cookiecutter.bitbucket_username }}", bb_token)
    except Exception as error:
        log_error(f'ERROR: {error}')
        sys.exit(10)

    log_check(f'Making sure a repo named {repo_name} does not already exist in bitbucket')
    verify_bitbucket_repo_doesnt_exist(project_name,repo_name)

    log_check(f'Creating a new bitbucket repo named {repo_name}')
    create_new_bitbucket_repo(project_name,repo_name)

    log_check(f'Initialize new local git repo and set origin to {repo_git_url}')
    init_local_git_repo(repo_name,repo_git_url)

    log_check(f'Add scaffolded files and commit them to local repo')
    add_and_commit()

    log_check(f'Pushing code to new bitbucket new and setting upstream to master')
    push_branch_to_bitbucket("master")

    horizontal_rule()
    log_info(f'A new repo named {repo_name} has been created in the')
    log_blank_bright(f'project named {project_name}. Links:')
    log_link("Git URL:", repo_git_url)
    log_link("Web URL:", repo_web_url)